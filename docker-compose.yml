services:
  db:
    image: postgres:15-alpine
    container_name: schedularr-db
    env_file:
      - backend/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U schedularr_user -d schedularr"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: schedularr-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  worker:
    build:
      context: .
      dockerfile: docker/worker.Dockerfile
    container_name: schedularr-worker
    env_file:
      - backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  beat:
    build:
      context: .
      dockerfile: docker/beat.Dockerfile
    container_name: schedularr-beat
    env_file:
      - backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: docker/web.Dockerfile
    container_name: schedularr-web
    env_file:
      - backend/.env
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    expose:
      - "8000"

  nginx:
    build:
      context: .
      dockerfile: docker/nginx.Dockerfile
    container_name: schedularr-nginx
    ports:
      - "8080:80"
    depends_on:
      - web
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: schedularr-network
