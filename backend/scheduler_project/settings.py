"""
Django settings for scheduler_project project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xau)@a6m-tca!wr*tft3!44v8vtl6wwa%%x*b0vb6ip+q-bz*o'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework', # Added Django REST Framework
    'django_filters', # Added django-filter
    'scheduler', # Added our scheduler app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'scheduler_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'scheduler_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'scheduler',
        'USER': 'avnadmin',
        'PASSWORD': 'AVNS_JJI2PAqtz0kJrNvgow3', # Consider using environment variables for sensitive data
        'HOST': 'postgres-kneelesh48.h.aivencloud.com',
        'PORT': '26739',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery Configuration Options
# Using Redis as the message broker
CELERY_BROKER_URL = 'rediss://default:AVNS_GYCbqMC7YqnH2qTkUt9@valkey-d37899f-kneelesh48.f.aivencloud.com:26740/0?ssl_cert_reqs=required' # Added SSL param to URL
# Using Redis as the result backend (optional, but good for tracking task states)
CELERY_RESULT_BACKEND = 'rediss://default:AVNS_GYCbqMC7YqnH2qTkUt9@valkey-d37899f-kneelesh48.f.aivencloud.com:26740/0?ssl_cert_reqs=required' # Added SSL param to URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE # Use Django's timezone

# Broker Connection Retry Settings
# Try to reconnect on startup if connection fails
BROKER_CONNECTION_RETRY_ON_STARTUP = True
# Enable automatic retry for broker connection errors (uses default strategy)
BROKER_CONNECTION_RETRY = True

# Broker Transport Options (for keepalives, visibility timeout)
# Visibility timeout: How long tasks can be invisible before being re-queued (seconds)
# Needs to be longer than the longest expected task time.
# Keepalive settings might help prevent idle connection drops by the server/network.
BROKER_TRANSPORT_OPTIONS = {
    'visibility_timeout': 3600,  # 1 hour (adjust as needed)
    'health_check_interval': 60, # Check connection every 60 seconds (helps keep it alive)
    # The following TCP keepalive options might be needed depending on network/server config
    # 'socket_keepalive': True,
    # 'socket_keepalive_options': {
    #     'tcp_keepidle_sec': 60,
    #     'tcp_keepintvl_sec': 30,
    #     'tcp_keepcnt': 3,
    # }
}
# SSL settings for Redis/Valkey connection (Now included in URLs above)
# CELERY_BROKER_USE_SSL = {'ssl_cert_reqs': 'CERT_REQUIRED'} # Removed
# CELERY_REDIS_BACKEND_USE_SSL = {'ssl_cert_reqs': 'CERT_REQUIRED'} # Removed

# Reddit API Credentials
REDDIT_CLIENT_ID = 'zkorJeDPCHAjU2FzhE-SmQ'
REDDIT_CLIENT_SECRET = 'lt481hsPmKs9vRaItF3MVqwSiGvz0w' # IMPORTANT: Use environment variables in production!
REDDIT_REDIRECT_URI = 'http://127.0.0.1:8000/reddit/callback'
REDDIT_USER_AGENT = 'web:reddit-scheduler:v0.1 (by /u/BoJackHorseMan53)' # Replace with your app name and Reddit username

# Celery Beat Settings
CELERY_BEAT_SCHEDULE = {
    'schedule-due-posts-every-minute': {
        'task': 'scheduler.tasks.schedule_due_posts', # Path to the task
        'schedule': 60.0,  # Run every 60 seconds
        # Alternatively, use crontab:
        # from celery.schedules import crontab
        # 'schedule': crontab(minute='*'), # Run every minute
    },
}
